MERN : 
M MONGO DB
E Express
R React js
N Node js

React js:

Library and framework:
pre define arch we have to just follow it:
Library: core concept:

node installed

npm create vite

npm:node package manager:
jdk: jvm-jre ---> jar --> package --> class ->method
node:node_modules -->npm -->node_module-->build -->.js|.ts -->func

CRA : depricted
react js lib:
vite:

npm is not rec eror
npm install npm -g

SPA : single page application -1 indec.html

D:
  projects:[f]
     MERN [f] ctrl + l -> cmd
       cmd 
	npm create vite
	  pname learning25
	  react
          javascript
	  cd learning25
	   npm install
           code . [vs code]		
		... click terminal -- new terminal
		     change to cmd
		     npm run dev	
	

2 type of compontes we can create in react js
1)class based compontes
2)function based compontes : 16.8

map demo

HTML - DOM --original dom*

virtual dom:


function bases component: hooks introduce..
hooks are the special function having special behaviour
use prefix
useState:


react js single page application:
react routing...


npm i react-router-dom

<BrowserRouter>
	<Routes>
		<Route>
	</>
</BrowserRouter>

create component Home and Movies

create routes in app.js
make entery in navbar.jsx


input color --> event.target.value color code

compontes:

props : props stand for properties
	    parent to child communication
		props are read only

to achive reusblity we use props

context:
redux


employee list
				<TableComponent header>
<table>
<tr>
<th>

student list
<table>
<tr>
<th>


<TableComponent>


Form handling....
react-hook-form : hook based form..

{
	required:
	{
		value:true,
		message:"name is required."
	}
}

{
            required:{
                value:true,
                message:"age is required"
            }
}


//useState ->0 -->change -->component re-render

Logic:
API : request methods

GET POST PUT DLETE PATCH

	     backednd   fronted
read     db --> GET   ->    GET -->DATa
write     db  <--POST        data<<<--write
delete   db  <--DELETE     data<<<--delete
update   db  <--PUT        data<<<--update

fetch - function 
axios - library :

sync
non sync

------------------------------------
====================================


non sync 

--------------------------- 1 hour
===================== no wait...



Promise : pending resolved rejected
async await
then catch

useEffect:
toHandle side effect in reactr js we can use useEffect hook:

data = [
    {
      "colors": [],
      "isAvailable": true,
      "unit": 0,
      "_id": "647a03a8b94e241eaf6b2479",
      "name": "ipad mini",
      "price": 20000,
      "description": "Na levai",
      "createdAt": "2023-06-02T14:58:48.736Z",
      "updatedAt": "2023-06-02T14:58:48.736Z",
      "__v": 0
    },
    {
      "colors": [],
      "isAvailable": true,
      "unit": 0,
      "_id": "647a03b9b94e241eaf6b247b",
      "name": "Lenovo legion",
      "price": 120000,
      "description": "i dont know",
      "createdAt": "2023-06-02T14:59:05.400Z",
      "updatedAt": "2023-06-02T14:59:05.400Z",
      "__v": 0
    },
    {
      "colors": [],
      "isAvailable": true,
      "unit": 0,
      "_id": "647a03d0b94e241eaf6b247d",
      "name": "Red rose",
      "price": 50,
      "description": "it's upto you",
      "createdAt": "2023-06-02T14:59:28.741Z",
      "updatedAt": "2023-06-02T14:59:28.741Z",
      "__v": 0
    },
]


contextAPI:

user -->userList -->subUserList

tasj:
expense management system:
title:car petrol
amount:1200
category:fuel
date:

title:medicine
amount:500
category:medical
date:

form: add expense..
//localstorage:

view expense:compontes
table formate:


props - context --
parent -- child --> state management tool
redux 

ui -- actoin --> store{}{}

component <<-store
reducer: is pure js funciton which will manage actions inside in and return new state of store..
action : function which will manage current state and return next state:

redux: redux tool kit


mUI TASK:
ratings.
slider : user array useState --> set...